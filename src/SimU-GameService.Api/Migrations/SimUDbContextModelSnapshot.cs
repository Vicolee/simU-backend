// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimU_GameService.Infrastructure.Persistence;

#nullable disable

namespace SimU_GameService.Api.Migrations
{
    [DbContext(typeof(SimUDbContext))]
    partial class SimUDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimU_GameService.Domain.Chat", b =>
                {
                    b.Property<string>("chatID")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isGroup")
                        .HasColumnType("boolean");

                    b.Property<string>("receiverID")
                        .HasColumnType("text");

                    b.Property<string>("senderID")
                        .HasColumnType("text");

                    b.HasKey("chatID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("SimU_GameService.Domain.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("befriendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("SimU_GameService.Domain.Group", b =>
                {
                    b.Property<string>("groupID")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<List<string>>("users")
                        .HasColumnType("text[]");

                    b.HasKey("groupID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SimU_GameService.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("x")
                        .HasColumnType("integer");

                    b.Property<int>("y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SimU_GameService.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("firebaseID")
                        .HasColumnType("text");

                    b.Property<string>("map_id")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SimU_GameService.Domain.Friend", b =>
                {
                    b.HasOne("SimU_GameService.Domain.User", null)
                        .WithMany("friends")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SimU_GameService.Domain.User", b =>
                {
                    b.HasOne("SimU_GameService.Domain.Location", "lastLocation")
                        .WithOne()
                        .HasForeignKey("SimU_GameService.Domain.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lastLocation");
                });

            modelBuilder.Entity("SimU_GameService.Domain.User", b =>
                {
                    b.Navigation("friends");
                });
#pragma warning restore 612, 618
        }
    }
}
